#!/bin/bash

set -o pipefail

# Directorio
_SCREENSHOT_DIR_=$(xdg-user-dir PICTURES)/Screenshots
_CONVERT_DIR_=$_SCREENSHOT_DIR_/MagickConvert
_LOG_FILE_="$_SCREENSHOT_DIR_/.screensht.log"

# Colores y configuraciones
_FG_COLOR_='#cdd6f4'
_BG_COLOR_='#63c6ff'
_BG_SIZE_=5
_BORDER_SIZE_=3
_SHADOW_SIZE_='100x40+0+16'
_ROUNDED_CORNER_=8
_AUTHOR_POST_=( 'South' '+0+15' )
_AUTHOR_NAME_="$USER"
_AUTHOR_COLOR_='#1e1e2e'
_FONT_SIZE_=12
_FONT_='JetBrainsMonoNL-NFM-Bold'
_ICON_SIZE_=60  # Tamaño de la imagen del icono

# Función para verificar si un comando falló y notificarlo
function check() {
    if [[ $? -eq 1 && ${PIPESTATUS[0]} -eq 1 ]]; then
        _end_job_=$(date +%s)
        summary $_start_job_ $_end_job_ 'failed' && dunstify -u critical -t 3000 -a "Screenshot Tool" "Screenshot Tool" "Screenshot cancelled or failed." >> $_LOG_FILE_ 2>&1
        exit 1
    fi
}

# Función para comprobar y crear directorios si no existen
function check_dir() {
    if [[ ! -d "$_SCREENSHOT_DIR_" || ! -d "$_CONVERT_DIR_" ]]; then
        mkdir -p "$_SCREENSHOT_DIR_"
        mkdir -p "$_CONVERT_DIR_"
    fi
}

# Función para procesar la imagen
function process_img() {
    _target_file_=$( echo "$_LATEST_IMAGE_" | sed 's/.png/.screensht.png/g'  )

    if [[ $_BORDER_SIZE_ -ge 3 ]]; then
        magick convert "$_LATEST_IMAGE_" \
            -format 'roundrectangle 1,1 %[fx:w+4],%[fx:h+4] '"$_ROUNDED_CORNER_"','"$_ROUNDED_CORNER_"''\
            info: > $_SCREENSHOT_DIR_/_rounded_.mvg
        check

        magick convert "$_LATEST_IMAGE_" -border $_BORDER_SIZE_ -alpha transparent \
            -background none -fill white -stroke none -strokewidth 0 \
            -draw "@"$_SCREENSHOT_DIR_"/_rounded_.mvg" $_SCREENSHOT_DIR_/_rounded_mask_.png >> $_LOG_FILE_ 2>&1
        check

        magick convert "$_LATEST_IMAGE_" -border $_BORDER_SIZE_ -alpha transparent \
            -background none -fill none -stroke $_FG_COLOR_ -strokewidth $_BORDER_SIZE_ \
            -draw "@"$_SCREENSHOT_DIR_"/_rounded_.mvg" $_SCREENSHOT_DIR_/_rounded_overlay_.png >> $_LOG_FILE_ 2>&1
        check

        magick convert "$_LATEST_IMAGE_" -alpha set -bordercolor none -border $_BORDER_SIZE_  \
            $_SCREENSHOT_DIR_/_rounded_mask_.png -compose DstIn -composite \
            $_SCREENSHOT_DIR_/_rounded_overlay_.png -compose Over -composite \
            "$_target_file_" >> $_LOG_FILE_ 2>&1 && \
        rm -f $_SCREENSHOT_DIR_/_rounded_*
        check
    else
        magick convert "$_LATEST_IMAGE_" \( +clone  -alpha extract -draw 'fill black polygon 0,0 0,'"$_ROUNDED_CORNER_"' '"$_ROUNDED_CORNER_"',0 fill white circle '"$_ROUNDED_CORNER_"','"$_ROUNDED_CORNER_"' '"$_ROUNDED_CORNER_"',0' \
        \( +clone -flip \) -compose Multiply -composite \
        \( +clone -flop \) -compose Multiply -composite \
        \) -alpha off -compose CopyOpacity -composite -compose over "$_target_file_" >> $_LOG_FILE_ 2>&1
        check
    fi

    magick convert "$_target_file_" \( +clone -background black -shadow $_SHADOW_SIZE_ \) +swap -background none -layers merge +repage "$_target_file_" >> $_LOG_FILE_ 2>&1 \
    && magick convert "$_target_file_" -bordercolor $_BG_COLOR_ -border $_BG_SIZE_ "$_target_file_" >> $_LOG_FILE_ 2>&1

    # Crear imagen del icono de la cámara
    magick convert -background none -fill $_AUTHOR_COLOR_ \
        -size ${_ICON_SIZE_}x${_ICON_SIZE_} -gravity center \
        -font "$_FONT_" "label:" "$_CONVERT_DIR_/camera_icon.png" >> $_LOG_FILE_ 2>&1

    # Superponer el icono de la cámara en la imagen
    magick composite -gravity ${_AUTHOR_POST_[0]} -geometry -32-5 \
        "$_CONVERT_DIR_/camera_icon.png" "$_target_file_" "$_target_file_" >> $_LOG_FILE_ 2>&1

    echo -en "  $_AUTHOR_NAME_  " | magick convert "$_target_file_" -gravity ${_AUTHOR_POST_[0]} -pointsize $_FONT_SIZE_ -fill $_AUTHOR_COLOR_ -undercolor none -font $_FONT_ -annotate ${_AUTHOR_POST_[1]} @- "$_target_file_" \
    >> $_LOG_FILE_ 2>&1 && magick convert "$_target_file_" -gravity South -chop 0x$(( $_BG_SIZE_ / 2 )) "$_target_file_" >> $_LOG_FILE_ 2>&1

    magick convert "$_target_file_" -gravity North -background $_BG_COLOR_ -splice 0x$(( $_BG_SIZE_ / 2 )) "$_target_file_" >> $_LOG_FILE_ 2>&1

    magick convert "$_target_file_" -profile /usr/share/color/icc/colord/sRGB.icc "$_target_file_" >> $_LOG_FILE_ 2>&1

    mv "$_target_file_" "$_CONVERT_DIR_"
}

# Función para resumir la ejecución y copiar la imagen al portapapeles
function summary() {
    if [[ $3 != "failed" ]]; then
        xclip -selection clipboard -t image/png -i "$_LATEST_IMAGE_" >> $_LOG_FILE_ 2>&1
        dunstify -i "$_LATEST_IMAGE_" -t 3000 "Screenshot Tool" \
            "Screenshot taken successfully!" -a "Screenshot Tool"
    fi
}

function main() {
    check_dir

    rm -f $_LOG_FILE_
    _start_job_=$(date +%s)

    _screenshot_command_="$1"
    _notif_message_="$2"

    $_screenshot_command_ "$_SCREENSHOT_DIR_"/$_start_job_.png > /dev/null 2>&1
    check

    get_latest_img
    summary $_start_job_ $_end_job_

    _end_job_=$(date +%s)
    process_img
}

# Función para obtener la imagen más reciente
function get_latest_img() { 
    _LATEST_IMAGE_=$(/bin/ls -th $_SCREENSHOT_DIR_ | grep -vE '.screensht.png$' \
        | grep -E '.png$' | head -n 1)

    if [[ $( echo "$_LATEST_IMAGE_" | wc -w ) -eq 0 ]]; then
        exit 1
    else
        _LATEST_IMAGE_="$_SCREENSHOT_DIR_/$_LATEST_IMAGE_"
    fi
}

# Check the args passed
case "$1" in
    "") cat <<EOF
Requires an argument:
area   - Area screenshot
full   - Fullscreen screenshot
Example:
./screensht area
./screensht full
EOF
        exit 1;;
    full) 
        msg="Full screenshot saved and copied to clipboard!"
        main 'maim' "${msg}";;
    area)
        msg='Area screenshot saved and copied to clipboard!'
        main 'maim -u -s' "${msg}";;
esac

